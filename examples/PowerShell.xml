<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE syntax SYSTEM "../Syntax.dtd">
<?xml-stylesheet type="text/xsl" href="../Syntax.xsl"?>
<syntax language="PowerShell" start="ScriptBlock">

  <comment>
    &lt;a style="color:blue;text-decoration:underline"
    href="https://github.com/PowerShell/EditorSyntax/blob/master/PowerShellSyntax.tmLanguage"
    &gt;Lexical Analysis Reference &lt;/a&gt;&lt;br/&gt;
    &lt;a style="color:blue;text-decoration:underline"
    href="https://github.com/PowerShell/PowerShell/blob/master/src/System.Management.Automation/engine/parser/Parser.cs"
    &gt;Syntactic Grammar Reference &lt;/a&gt;&lt;br/&gt;
  </comment>

  <comment>
    &lt;span style="color:black;font-weight:normal;font-style:italic"&gt;
    ␤ &lt;/span&gt; &amp;nbsp; means optional new lines.
    &lt;br/&gt;
    &lt;span class="terminal" style="color:black"&gt;; &lt;/span&gt; means a
    &lt;span style="color:black;font-weight:normal;font-style:italic"&gt;
    StatementTerminator &lt;/span&gt;, which is a semicolor or a new line.
  </comment>

  <rule name="ScriptBlock">
    <comment>
      see also &lt;span class="terminal"
      style="color:black"&gt;Invoke-Command &lt;/span&gt;
    </comment>
    <definition>
      <comment>Can a ScriptBlock have attributes?</comment>
      <nonterminal name="␤"/>
      <terminal>{</terminal>
      <optional>
        <nonterminal name="␤"/>
        <nonterminal name="Script"/>
      </optional>
      <nonterminal name="␤"/>
      <terminal>}</terminal>
    </definition>
  </rule>
  <rule name="Script">
    <definition>
      <optional>
        <nonterminal name="UsingStatements"/>
      </optional>
      <optional>
        <nonterminal name="ParamBlock"/>
      </optional>
      <repeated>
        <optional>
          <terminal>;</terminal>
        </optional>
      </repeated>
      <repeated>
        <optional>
          <nonterminal name="NamedBlock"/>
        </optional>
      </repeated>
    </definition>
    <definition>
      <optional>
        <nonterminal name="UsingStatements"/>
      </optional>
      <optional>
        <nonterminal name="ParamBlock"/>
      </optional>
      <repeated>
        <optional>
          <terminal>;</terminal>
        </optional>
      </repeated>
      <optional>
        <nonterminal name="Statements"/>
      </optional>
    </definition>
  </rule>

  <rule name="UsingStatements">
    <definition>
      <nonterminal name="UsingStatement"/>
      <optional>
        <terminal>;</terminal>
        <nonterminal name="UsingStatement"/>
      </optional>
    </definition>
  </rule>
  <rule name="UsingStatement">
    <definition>
      <terminal type="case-insensitive">using</terminal>
      <nonterminal name="UsingStatementKind"/>
      <optional>
        <nonterminal name="Alias"/>
        <terminal>=</terminal>
      </optional>
      <nonterminal name="Name"/>
    </definition>
    <definition>
      <terminal type="case-insensitive">using</terminal>
      <terminal type="case-insensitive">module</terminal>
      <optional>
        <nonterminal name="Alias"/>
        <terminal>=</terminal>
      </optional>
      <nonterminal name="ModuleSpecification"/>
    </definition>
  </rule>
  <rule name="UsingStatementKind">
    <comment>[System.Enum]::GetNames('System.Management.Automation.Language.UsingStatementKind')</comment>
    <definition>
      <terminal type="case-insensitive">assembly</terminal>
    </definition>
    <definition>
      <terminal type="case-insensitive">command</terminal>
    </definition>
    <definition>
      <comment>
        module name or path to module file,
        see also &lt;span class="terminal"
        style="color:black"&gt;Import-Module &lt;/span&gt;
        and &lt;span class="terminal"
        style="color:black"&gt;#requires &lt;/span&gt;
      </comment>
      <terminal type="case-insensitive">module</terminal>
    </definition>
    <definition>
      <comment>.NET namespace, like System.Management.Automation.Language</comment>
      <terminal type="case-insensitive">namespace</terminal>
    </definition>
    <definition>
      <terminal type="case-insensitive">type</terminal>
    </definition>
  </rule>
  <rule name="Alias">
    <definition>
      <nonterminal name="StringConstantExpression"/>
    </definition>
  </rule>
  <rule name="Name">
    <definition>
      <nonterminal name="StringConstantExpression"/>
    </definition>
  </rule>
  <rule name="ModuleSpecification">
    <definition>
      <nonterminal name="HashTable"/>
    </definition>
  </rule>

  <rule name="ParamBlock">
    <definition>
      <nonterminal name="␤"/>
      <repeated>
        <optional>
          <nonterminal name="Attribute"/>
        </optional>
      </repeated>
      <nonterminal name="␤"/>
      <terminal type="case-insensitive">param</terminal>
      <nonterminal name="␤"/>
      <terminal>(</terminal>
      <optional>
        <nonterminal name="ParameterList"/>
      </optional>
      <nonterminal name="␤"/>
      <terminal>)</terminal>
    </definition>
  </rule>
  <rule name="Attribute">
    <definition>
      <terminal>[</terminal>
      <nonterminal name="AttributeName"/>
      <terminal>(</terminal>
      <optional>
        <nonterminal name="AttributeArgumentList"/>
      </optional>
      <terminal>)</terminal>
      <terminal>]</terminal>
    </definition>
    <definition>
      <terminal>[</terminal>
      <nonterminal name="TypeSpec"/>
      <terminal>]</terminal>
    </definition>
  </rule>
  <rule name="AttributeArgumentList">
    <definition>
      <nonterminal name="AttributeArgument"/>
      <repeated>
        <optional>
          <nonterminal name="␤"/>
          <terminal>,</terminal>
          <nonterminal name="AttributeArgument"/>
        </optional>
      </repeated>
    </definition>
  </rule>
  <rule name="AttributeArgument">
    <definition>
      <optional>
        <nonterminal name="␤"/>
        <nonterminal name="PropertyName"/>
        <terminal>=</terminal>
      </optional>
      <nonterminal name="␤"/>
      <nonterminal name="Expression"/>
    </definition>
  </rule>
  <rule name="TypeSpec">
    <definition>
      <comment>simple type</comment>
      <nonterminal name="TypeName"/>
    </definition>
    <definition>
      <comment>array type with optional dimensions</comment>
      <nonterminal name="TypeName"/>
      <terminal>[</terminal>
      <repeated>
        <optional>
          <terminal>,</terminal>
        </optional>
      </repeated>
      <terminal>]</terminal>
    </definition>
    <definition>
      <comment>generic type</comment>
      <nonterminal name="TypeName"/>
      <terminal>[</terminal>
      <nonterminal name="TypeSpec"/>
      <repeated>
        <optional>
          <terminal>,</terminal>
          <nonterminal name="TypeSpec"/>
        </optional>
      </repeated>
      <terminal>]</terminal>
    </definition>
  </rule>
  <rule name="TypeName">
    <comment>
      see also &lt;a style="color:blue;text-decoration:underline"
      href="https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/specifying-fully-qualified-type-names"
      &gt;.NET type name specification&lt;/a&gt;
    </comment>
    <definition>
      <nonterminal name="NamespaceTypeName"/>
      <optional>
        <terminal>,</terminal>
        <nonterminal name="AssemblyNameSpec"/>
      </optional>
    </definition>
  </rule>
  <rule name="NamespaceTypeName">
    <definition>
      <optional>
        <nonterminal name="NamespaceSpec"/>
        <terminal>.</terminal>
      </optional>
      <nonterminal name="NestedTypeName"/>
    </definition>
  </rule>
  <rule name="NestedTypeName">
    <definition>
      <nonterminal name="TypeNameIdentifier"/>
      <repeated>
        <optional>
          <terminal>+</terminal>
          <nonterminal name="TypeNameIdentifier"/>
        </optional>
      </repeated>
    </definition>
  </rule>
  <rule name="NamespaceSpec">
    <definition>
      <repeated>
        <optional>
          <nonterminal name="TypeNameIdentifier"/>
          <terminal>.</terminal>
        </optional>
      </repeated>
      <nonterminal name="TypeNameIdentifier"/>
    </definition>
  </rule>
  <rule name="TypeNameIdentifier">
    <definition>
      <terminal type="regular">[\p{L}\p{Nd}.`_]+</terminal>
    </definition>
  </rule>
  <rule name="ParameterList">
    <definition>
      <nonterminal name="Parameter"/>
      <repeated>
        <optional>
          <nonterminal name="␤"/>
          <terminal>,</terminal>
          <nonterminal name="Parameter"/>
        </optional>
      </repeated>
    </definition>
  </rule>
  <rule name="Parameter">
    <definition>
      <nonterminal name="␤"/>
      <repeated>
        <optional>
          <nonterminal name="Attribute"/>
        </optional>
      </repeated>
      <nonterminal name="␤"/>
      <nonterminal name="Variable"/>
      <optional>
        <nonterminal name="␤"/>
        <terminal>=</terminal>
        <nonterminal name="␤"/>
        <nonterminal name="Expression"/>
      </optional>
    </definition>
  </rule>
  <rule name="NamedBlock">
    <definition>
      <repeated>
        <optional>
          <terminal>;</terminal>
        </optional>
      </repeated>
      <nonterminal name="BlockKind"/>
      <nonterminal name="StatementBlock"/>
    </definition>
  </rule>
  <rule name="BlockKind">
    <comment>at most one of each</comment>
    <definition>
      <terminal type="case-insensitive">dynamicparam</terminal>
    </definition>
    <definition>
      <terminal type="case-insensitive">begin</terminal>
    </definition>
    <definition>
      <terminal type="case-insensitive">process</terminal>
    </definition>
    <definition>
      <terminal type="case-insensitive">end</terminal>
    </definition>
  </rule>
  <rule name="StatementBlock">
    <definition>
      <nonterminal name="␤"/>
      <terminal>{</terminal>
      <optional>
        <nonterminal name="Statements"/>
      </optional>
      <nonterminal name="␤"/>
      <terminal>}</terminal>
    </definition>
  </rule>
  <rule name="Statements">
    <definition>
      <nonterminal name="Statement"/>
      <repeated>
        <optional>
          <terminal>;</terminal>
          <nonterminal name="Statement"/>
        </optional>
      </repeated>
    </definition>
  </rule>
  <rule name="Statement">
    <definition>
      <nonterminal name="BlockStatement"/>
    </definition>
    <definition>
      <nonterminal name="IfStatement"/>
    </definition>
    <definition>
      <optional>
        <terminal>:</terminal>
        <nonterminal name="LabelExpression"/>
      </optional>
      <nonterminal name="LabeledStatement"/>
    </definition>
    <definition>
      <nonterminal name="FlowControlStatement"/>
      <terminal>;</terminal>
    </definition>
    <definition>
      <nonterminal name="TryStatement"/>
    </definition>
    <definition>
      <nonterminal name="TrapStatement"/>
    </definition>
    <definition>
      <nonterminal name="DataStatement"/>
    </definition>
    <definition>
      <nonterminal name="DynamicKeywordStatement"/>
    </definition>
    <definition>
      <nonterminal name="ErrorStatement"/>
    </definition>
    <definition>
      <nonterminal name="ClassDefinition"/>
    </definition>
    <definition>
      <nonterminal name="EnumDefinition"/>
    </definition>
    <definition>
      <nonterminal name="FunctionDefinition"/>
    </definition>
    <definition>
      <nonterminal name="TypeDefinition"/>
    </definition>
    <definition>
      <nonterminal name="PipelineChain"/>
      <terminal>;</terminal>
    </definition>
  </rule>
  <rule name="BlockStatement">
    <definition>
      <terminal type="case-insensitive">parallel</terminal>
      <nonterminal name="StatementBlock"/>
    </definition>
    <definition>
      <terminal type="case-insensitive">sequence</terminal>
      <nonterminal name="StatementBlock"/>
    </definition>
    <definition>
      <terminal type="case-insensitive">inlinescript</terminal>
      <nonterminal name="ScriptBlock"/>
    </definition>
  </rule>
  <rule name="IfStatement">
    <definition>
      <terminal type="case-insensitive">if</terminal>
      <nonterminal name="␤"/>
      <terminal>(</terminal>
      <nonterminal name="PipelineChain"/>
      <terminal>)</terminal>
      <nonterminal name="StatementBlock"/>
      <repeated>
        <optional>
          <terminal type="case-insensitive">elseif</terminal>
          <nonterminal name="␤"/>
          <terminal>(</terminal>
          <nonterminal name="PipelineChain"/>
          <terminal>)</terminal>
          <nonterminal name="StatementBlock"/>
        </optional>
      </repeated>
      <optional>
        <terminal type="case-insensitive">else</terminal>
        <nonterminal name="StatementBlock"/>
      </optional>
    </definition>
  </rule>
  <rule name="LabeledStatement">
    <definition>
      <nonterminal name="SwitchStatement"/>
    </definition>
    <definition>
      <nonterminal name="LoopStatement"/>
    </definition>
  </rule>
  <rule name="SwitchStatement">
    <definition>
      <terminal type="case-insensitive">switch</terminal>
      <nonterminal name="␤"/>
      <repeated>
        <optional>
          <nonterminal name="SwitchFlag"/>
        </optional>
      </repeated>
      <nonterminal name="SwitchCondition"/>
      <nonterminal name="␤"/>
      <terminal>{</terminal>
      <nonterminal name="␤"/>
      <repeated>
        <nonterminal name="SwitchClause"/>
      </repeated>
      <terminal>}</terminal>
    </definition>
  </rule>
  <rule name="SwitchFlag">
    <comment>[System.Enum]::GetNames('System.Management.Automation.Language.SwitchFlags')</comment>
    <definition>
      <terminal type="case-insensitive">-regex</terminal>
    </definition>
    <definition>
      <terminal type="case-insensitive">-wildcard</terminal>
    </definition>
    <definition>
      <terminal type="case-insensitive">-exact</terminal>
    </definition>
    <definition>
      <terminal type="case-insensitive">-casesensitive</terminal>
    </definition>
    <definition>
      <terminal type="case-insensitive">-parallel</terminal>
    </definition>
  </rule>
  <rule name="SwitchCondition">
    <definition>
      <terminal>(</terminal>
      <nonterminal name="␤"/>
      <nonterminal name="PipelineChain"/>
      <nonterminal name="␤"/>
      <terminal>)</terminal>
    </definition>
    <definition>
      <terminal type="case-insensitive">-file</terminal>
      <nonterminal name="␤"/>
      <nonterminal name="Filename"/>
    </definition>
  </rule>
  <rule name="Filename">
    <definition>
      <nonterminal name="CommandArgument"/>
    </definition>
    <definition>
      <nonterminal name="PrimaryExpression"/>
    </definition>
  </rule>
  <rule name="SwitchClause">
    <definition>
      <nonterminal name="SwitchClauseCondition"/>
      <nonterminal name="StatementBlock"/>
      <repeated>
        <optional>
          <terminal>;</terminal>
        </optional>
      </repeated>
    </definition>
  </rule>
  <rule name="SwitchClauseCondition">
    <definition>
      <nonterminal name="CommandArgument"/>
    </definition>
    <definition>
      <nonterminal name="PrimaryExpression"/>
    </definition>
    <definition>
      <comment>
        Only one &lt;span class="terminal"
        style="color:black"&gt;default &lt;/span&gt;
        clause is allowed in a &lt;span class="terminal"
        style="color:black"&gt;switch &lt;/span&gt; statement.
      </comment>
      <terminal>default</terminal>
    </definition>
  </rule>
  <rule name="LoopStatement">
    <definition>
      <nonterminal name="DoStatement"/>
    </definition>
    <definition>
      <nonterminal name="WhileStatement"/>
    </definition>
    <definition>
      <nonterminal name="ForStatement"/>
    </definition>
    <definition>
      <nonterminal name="ForEachStatement"/>
    </definition>
  </rule>
  <rule name="DoStatement">
    <definition>
      <comment>&lt;i&gt;DoUntilStatement&lt;/i&gt;</comment>
      <terminal type="case-insensitive">do</terminal>
      <nonterminal name="StatementBlock"/>
      <nonterminal name="␤"/>
      <terminal type="case-insensitive">until</terminal>
      <nonterminal name="␤"/>
      <terminal>(</terminal>
      <nonterminal name="␤"/>
      <nonterminal name="PipelineChain"/>
      <nonterminal name="␤"/>
      <terminal>)</terminal>
    </definition>
    <definition>
      <comment>&lt;i&gt;DoWhileStatement&lt;/i&gt;</comment>
      <terminal type="case-insensitive">do</terminal>
      <nonterminal name="StatementBlock"/>
      <nonterminal name="␤"/>
      <terminal type="case-insensitive">while</terminal>
      <nonterminal name="␤"/>
      <terminal>(</terminal>
      <nonterminal name="␤"/>
      <nonterminal name="PipelineChain"/>
      <nonterminal name="␤"/>
      <terminal>)</terminal>
    </definition>
  </rule>
  <rule name="WhileStatement">
    <definition>
      <terminal type="case-insensitive">while</terminal>
      <nonterminal name="␤"/>
      <terminal>(</terminal>
      <nonterminal name="␤"/>
      <nonterminal name="PipelineChain"/>
      <nonterminal name="␤"/>
      <terminal>)</terminal>
      <nonterminal name="StatementBlock"/>
    </definition>
  </rule>
  <rule name="ForStatement">
    <definition>
      <comment>ForInitializer</comment>
      <terminal type="case-insensitive">for</terminal>
      <nonterminal name="␤"/>
      <terminal>(</terminal>
      <nonterminal name="␤"/>
      <optional>
        <nonterminal name="PipelineChain"/>
      </optional>
      <nonterminal name="␤"/>
      <terminal>)</terminal>
      <nonterminal name="StatementBlock"/>
    </definition>
    <definition>
      <comment>ForCondition</comment>
      <terminal type="case-insensitive">for</terminal>
      <nonterminal name="␤"/>
      <terminal>(</terminal>
      <nonterminal name="␤"/>
      <optional>
        <nonterminal name="PipelineChain"/>
      </optional>
      <terminal>;</terminal>
      <nonterminal name="␤"/>
      <optional>
        <nonterminal name="PipelineChain"/>
      </optional>
      <nonterminal name="␤"/>
      <terminal>)</terminal>
      <nonterminal name="StatementBlock"/>
    </definition>
    <definition>
      <comment>ForIterator</comment>
      <terminal type="case-insensitive">for</terminal>
      <nonterminal name="␤"/>
      <terminal>(</terminal>
      <nonterminal name="␤"/>
      <optional>
        <nonterminal name="PipelineChain"/>
      </optional>
      <terminal>;</terminal>
      <nonterminal name="␤"/>
      <optional>
        <nonterminal name="PipelineChain"/>
      </optional>
      <terminal>;</terminal>
      <nonterminal name="␤"/>
      <optional>
        <nonterminal name="PipelineChain"/>
      </optional>
      <nonterminal name="␤"/>
      <terminal>)</terminal>
      <nonterminal name="StatementBlock"/>
    </definition>
  </rule>
  <rule name="ForEachStatement">
    <comment>
      See also &lt;span class="terminal"
      style="color:black"&gt;ForEach-Object &lt;/span&gt;
    </comment>
    <definition>
      <terminal type="case-insensitive">foreach</terminal>
      <nonterminal name="␤"/>
      <repeated>
        <optional>
          <nonterminal name="ForEachFlags"/>
        </optional>
      </repeated>
      <nonterminal name="␤"/>
      <terminal>(</terminal>
      <nonterminal name="␤"/>
      <nonterminal name="Variable"/>
      <nonterminal name="␤"/>
      <terminal type="case-insensitive">in</terminal>
      <nonterminal name="␤"/>
      <nonterminal name="PipelineChain"/>
      <nonterminal name="␤"/>
      <terminal>)</terminal>
      <nonterminal name="StatementBlock"/>
    </definition>
  </rule>
  <rule name="ForEachFlags">
    <comment>[System.Enum]::GetNames('System.Management.Automation.Language.ForEachFlags')</comment>
    <definition>
      <terminal type="case-insensitive">-parallel</terminal>
    </definition>
    <definition>
      <terminal type="case-insensitive">-throttlelimit</terminal>
      <nonterminal name="␤"/>
      <nonterminal name="ThrottleLimit"/>
    </definition>
  </rule>
  <rule name="ThrottleLimit">
    <definition>
      <nonterminal name="CommandArgument"/>
    </definition>
    <definition>
      <nonterminal name="PrimaryExpression"/>
    </definition>
  </rule>
  <rule name="FlowControlStatement">
    <definition>
      <comment>&lt;i&gt;BreakStatement&lt;/i&gt;</comment>
      <terminal type="case-insensitive">break</terminal>
      <optional>
        <nonterminal name="LabelExpression"/>
      </optional>
    </definition>
    <definition>
      <comment>&lt;i&gt;ContinueStatement&lt;/i&gt;</comment>
      <terminal type="case-insensitive">continue</terminal>
      <optional>
        <nonterminal name="LabelExpression"/>
      </optional>
    </definition>
    <definition>
      <comment>&lt;i&gt;ThrowStatement&lt;/i&gt;</comment>
      <terminal type="case-insensitive">throw</terminal>
      <optional>
        <nonterminal name="PipelineChain"/>
      </optional>
    </definition>
    <definition>
      <comment>&lt;i&gt;ReturnStatement&lt;/i&gt;</comment>
      <terminal type="case-insensitive">return</terminal>
      <optional>
        <nonterminal name="PipelineChain"/>
      </optional>
    </definition>
    <definition>
      <comment>&lt;i&gt;ExitStatement&lt;/i&gt;</comment>
      <terminal type="case-insensitive">exit</terminal>
      <optional>
        <nonterminal name="PipelineChain"/>
      </optional>
    </definition>
  </rule>




  <rule name="LabelExpression">
    <definition>
      <nonterminal name="SimpleName"/>
    </definition>
    <definition>
      <nonterminal name="UnaryExpression"/>
    </definition>
  </rule>
  <rule name="KeyExpression">
    <definition>
      <nonterminal name="SimpleName"/>
    </definition>
    <definition>
      <nonterminal name="UnaryExpression"/>
    </definition>
  </rule>




  <rule name="TrapStatement">
    <definition>
      <terminal type="case-insensitive">trap</terminal>
      <nonterminal name="␤"/>
      <optional>
        <nonterminal name="TypeLiteral"/>
      </optional>
      <nonterminal name="StatementBlock"/>
    </definition>
  </rule>

  <rule name="TryStatement">
    <definition>
      <terminal type="case-insensitive">try</terminal>
      <nonterminal name="StatementBlock"/>
      <nonterminal name="␤"/>
      <terminal type="case-insensitive">finally</terminal>
      <nonterminal name="StatementBlock"/>
    </definition>
    <definition>
      <terminal type="case-insensitive">try</terminal>
      <nonterminal name="StatementBlock"/>
      <repeated>
        <nonterminal name="␤"/>
        <terminal type="case-insensitive">catch</terminal>
        <optional>
          <nonterminal name="TypeList"/>
        </optional>
        <nonterminal name="StatementBlock"/>
      </repeated>
      <optional>
        <nonterminal name="␤"/>
        <terminal type="case-insensitive">finally</terminal>
        <nonterminal name="StatementBlock"/>
      </optional>
    </definition>
  </rule>
  <rule name="TypeList">
    <definition>
      <nonterminal name="␤"/>
      <nonterminal name="TypeLiteral"/>
      <repeated>
        <optional>
          <nonterminal name="␤"/>
          <terminal>,</terminal>
          <nonterminal name="␤"/>
          <nonterminal name="TypeLiteral"/>
        </optional>
      </repeated>
    </definition>
  </rule>

  <rule name="PipelineChain">
    <comment>
      with optional background operator &lt;span class="terminal"
      style="color:black"&gt;&amp; &lt;/span&gt; at the end
    </comment>
    <definition>
      <nonterminal name="Pipeline"/>
      <repeated>
        <optional>
          <nonterminal name="ChainOperator"/>
          <nonterminal name="Pipeline"/>
        </optional>
      </repeated>
      <optional>
        <terminal>&amp;</terminal>
      </optional>
    </definition>
  </rule>
  <rule name="ChainOperator">
    <definition>
      <terminal>&amp;&amp;</terminal>
      <terminal>||</terminal>
    </definition>
  </rule>

  <rule name="Pipeline">
    <definition>
      <nonterminal name="Assignment"/>
    </definition>
    <definition>
      <nonterminal name="Expression"/>
      <repeated>
        <optional>
          <nonterminal name="Redirection"/>
        </optional>
      </repeated>
      <repeated>
        <optional>
          <nonterminal name="␤"/>
          <terminal>|</terminal>
          <nonterminal name="␤"/>
          <nonterminal name="Command"/>
        </optional>
      </repeated>
    </definition>
    <definition>
      <nonterminal name="Command"/>
      <repeated>
        <optional>
          <nonterminal name="␤"/>
          <terminal>|</terminal>
          <nonterminal name="Command"/>
        </optional>
      </repeated>
    </definition>
  </rule>

  <rule name="Redirection">
    <comment>
      see also &lt;span class="terminal"
      style="color:black"&gt;Out-File &lt;/span&gt;
      and &lt;span class="terminal"
      style="color:black"&gt;Tee-Object &lt;/span&gt;
    </comment>
    <definition>
      <comment>redirect to default stream</comment>
      <nonterminal name="StreamNumber"/>
      <terminal>&gt;&amp;1</terminal>
    </definition>
    <definition>
      <comment>overwrite file</comment>
      <optional>
        <nonterminal name="StreamNumber"/>
      </optional>
      <terminal>&gt;</terminal>
      <nonterminal name="Filename"/>
    </definition>
    <definition>
      <comment>append to file</comment>
      <optional>
        <nonterminal name="StreamNumber"/>
      </optional>
      <terminal>&gt;&gt;</terminal>
      <nonterminal name="Filename"/>
    </definition>
  </rule>
  <rule name="StreamNumber">
    <definition>
      <comment>Success stream (default)</comment>
      <terminal>1</terminal>
    </definition>
    <definition>
      <comment>Error stream</comment>
      <terminal>2</terminal>
    </definition>
    <definition>
      <comment>Warning stream</comment>
      <terminal>3</terminal>
    </definition>
    <definition>
      <comment>Verbose stream</comment>
      <terminal>4</terminal>
    </definition>
    <definition>
      <comment>Debug stream</comment>
      <terminal>5</terminal>
    </definition>
    <definition>
      <comment>Information stream</comment>
      <terminal>6</terminal>
    </definition>
    <definition>
      <comment>All streams</comment>
      <terminal>*</terminal>
    </definition>
  </rule>

  <rule name="Assignment">
    <definition>
      <nonterminal name="Expression"/>
      <nonterminal name="AssignmentOperator"/>
      <nonterminal name="Statement"/>
    </definition>
  </rule>

  <rule name="Variable">
    <comment>Variable names are case-insensitive!</comment>
    <definition>
      <terminal>$</terminal>
      <optional>
        <nonterminal name="Scope"/>
        <terminal>:</terminal>
      </optional>
      <terminal type="regular">[\p{L}\p{Nd}_?]+</terminal>
    </definition>
    <definition>
      <terminal>$</terminal>
      <terminal>{</terminal>
      <terminal type="regular">[^`}]+</terminal>
      <terminal>}</terminal>
    </definition>
  </rule>
  <rule name="Scope">
    <definition>
      <terminal type="case-insensitive">global</terminal>
    </definition>
    <definition>
      <comment>default scope for functions and aliases</comment>
      <terminal type="case-insensitive">local</terminal>
    </definition>
    <definition>
      <comment>restricts visibility to current scope</comment>
      <terminal type="case-insensitive">private</terminal>
    </definition>
    <definition>
      <comment>default scope for scripts</comment>
      <terminal type="case-insensitive">script</terminal>
    </definition>
    <definition>
      <comment>identifies local variable in a remote command</comment>
      <terminal type="case-insensitive">using</terminal>
    </definition>
    <definition>
      <terminal type="case-insensitive">workflow</terminal>
    </definition>
  </rule>
  <rule name="AssignmentOperator">
    <definition>
      <terminal>=</terminal>
      <terminal>+=</terminal>
      <terminal>-=</terminal>
      <terminal>*=</terminal>
      <terminal>/=</terminal>
      <terminal>%=</terminal>
    </definition>
  </rule>



  <rule name="Expression">
    <definition>
      <nonterminal name="LogicalExpression"/>
    </definition>
  </rule>
  <rule name="LogicalExpression">
    <definition>
      <nonterminal name="TernaryExpression"/>
    </definition>
    <definition>
      <nonterminal name="BinaryExpression"/>
    </definition>
  </rule>
  <rule name="TernaryExpression">
    <definition>
      <nonterminal name="BinaryExpression"/>
      <terminal>?</terminal>
      <nonterminal name="␤"/>
      <nonterminal name="TernaryExpression"/>
      <nonterminal name="␤"/>
      <terminal>:</terminal>
      <nonterminal name="␤"/>
      <nonterminal name="TernaryExpression"/>
    </definition>
  </rule>
  <rule name="BinaryExpression">
    <definition>
      <nonterminal name="BitwiseExpression"/>
      <repeated>
        <optional>
          <nonterminal name="LogicalOperator"/>
          <nonterminal name="␤"/>
          <nonterminal name="BitwiseExpression"/>
        </optional>
      </repeated>
    </definition>
  </rule>
  <rule name="LogicalOperator">
    <definition>
      <terminal type="case-insensitive">-and</terminal>
      <terminal type="case-insensitive">-or</terminal>
      <terminal type="case-insensitive">-xor</terminal>
    </definition>
  </rule>
  <rule name="BitwiseExpression">
    <definition>
      <nonterminal name="Comparison"/>
      <repeated>
        <optional>
          <nonterminal name="BitwiseOperator"/>
          <nonterminal name="␤"/>
          <nonterminal name="Comparison"/>
        </optional>
      </repeated>
    </definition>
  </rule>
  <rule name="BitwiseOperator">
    <definition>
      <terminal type="case-insensitive">-band</terminal>
      <terminal type="case-insensitive">-bor</terminal>
      <terminal type="case-insensitive">-bxor</terminal>
      <terminal type="case-insensitive">-shl</terminal>
      <terminal type="case-insensitive">-shr</terminal>
    </definition>
  </rule>
  <rule name="Comparison">
    <definition>
      <nonterminal name="NullCoalesceExpression"/>
      <repeated>
        <optional>
          <nonterminal name="TypeOperator"/>
          <nonterminal name="␤"/>
          <nonterminal name="NullCoalesceExpression"/>
        </optional>
      </repeated>
    </definition>
    <definition>
      <nonterminal name="NullCoalesceExpression"/>
      <repeated>
        <optional>
          <nonterminal name="ComparisonOperator"/>
          <nonterminal name="␤"/>
          <nonterminal name="NullCoalesceExpression"/>
        </optional>
      </repeated>
    </definition>
    <definition>
      <nonterminal name="NullCoalesceExpression"/>
      <repeated>
        <optional>
          <terminal type="case-insensitive">-split</terminal>
          <nonterminal name="␤"/>
          <nonterminal name="NullCoalesceExpression"/>
        </optional>
      </repeated>
    </definition>
    <definition>
      <nonterminal name="NullCoalesceExpression"/>
      <repeated>
        <optional>
          <terminal type="case-insensitive">-join</terminal>
          <nonterminal name="␤"/>
          <nonterminal name="NullCoalesceExpression"/>
        </optional>
      </repeated>
    </definition>
  </rule>
  <rule name="TypeOperator">
    <definition>
      <terminal type="case-insensitive">-is</terminal>
      <terminal type="case-insensitive">-isNot</terminal>
      <terminal type="case-insensitive">-as</terminal>
    </definition>
  </rule>
  <rule name="ComparisonOperator">
    <comment>
      Use prefix 'c' for case-sensitive variant (e.g.
      &lt;span class="terminal"
      style="color:black"&gt;-ceq &lt;/span&gt;).&lt;br/&gt;
      Use prefix 'i' for explicitly case-insensitive variant (e.g.
      &lt;span class="terminal"
      style="color:black"&gt;-ieq &lt;/span&gt;).&lt;br/&gt;
    </comment>
    <definition>
      <comment>
        Equality operators
      </comment>
      <terminal type="case-insensitive">-eq</terminal>
      <terminal type="case-insensitive">-ne</terminal>
      <terminal type="case-insensitive">-ge</terminal>
      <terminal type="case-insensitive">-gt</terminal>
      <terminal type="case-insensitive">-lt</terminal>
      <terminal type="case-insensitive">-le</terminal>
    </definition>
    <definition>
      <comment>
        Matching operators
      </comment>
      <terminal type="case-insensitive">-match</terminal>
      <terminal type="case-insensitive">-notMatch</terminal>
      <terminal type="case-insensitive">-like</terminal>
      <terminal type="case-insensitive">-notLike</terminal>
    </definition>
    <definition>
      <comment>
        Containment operators
      </comment>
      <terminal type="case-insensitive">-contains</terminal>
      <terminal type="case-insensitive">-notContains</terminal>
      <terminal type="case-insensitive">-in</terminal>
      <terminal type="case-insensitive">-notIn</terminal>
    </definition>
    <definition>
      <comment>
        Replacement operator
      </comment>
      <terminal type="case-insensitive">-replace</terminal>
    </definition>
  </rule>
  <rule name="NullCoalesceExpression">
    <definition>
      <nonterminal name="Addition"/>
      <repeated>
        <optional>
          <terminal>??</terminal>
          <nonterminal name="␤"/>
          <nonterminal name="Addition"/>
        </optional>
      </repeated>
    </definition>
  </rule>
  <rule name="Addition">
    <definition>
      <nonterminal name="Multiplication"/>
      <repeated>
        <optional>
          <nonterminal name="AdditionOperator"/>
          <nonterminal name="␤"/>
          <nonterminal name="Multiplication"/>
        </optional>
      </repeated>
    </definition>
  </rule>
  <rule name="AdditionOperator">
    <definition>
      <comment>
        Minus may be any dash character.
      </comment>
      <terminal>+</terminal>
      <terminal>-</terminal>
    </definition>
  </rule>
  <rule name="Multiplication">
    <definition>
      <nonterminal name="FormatExpression"/>
      <repeated>
        <optional>
          <nonterminal name="MultiplicationOperator"/>
          <nonterminal name="␤"/>
          <nonterminal name="FormatExpression"/>
        </optional>
      </repeated>
    </definition>
  </rule>
  <rule name="MultiplicationOperator">
    <definition>
      <terminal>*</terminal>
      <terminal>/</terminal>
      <terminal>%</terminal>
    </definition>
  </rule>
  <rule name="FormatExpression">
    <definition>
      <nonterminal name="RangeExpression"/>
      <repeated>
        <optional>
          <terminal type="case-insensitive">-f</terminal>
          <nonterminal name="␤"/>
          <nonterminal name="RangeExpression"/>
        </optional>
      </repeated>
    </definition>
  </rule>
  <rule name="RangeExpression">
    <definition>
      <nonterminal name="ArrayLiteral"/>
      <repeated>
        <optional>
          <terminal>..</terminal>
          <nonterminal name="␤"/>
          <nonterminal name="ArrayLiteral"/>
        </optional>
      </repeated>
    </definition>
  </rule>
  <rule name="ArrayLiteral">
    <definition>
      <nonterminal name="UnaryExpression"/>
      <repeated>
        <optional>
          <terminal>,</terminal>
          <nonterminal name="␤"/>
          <nonterminal name="UnaryExpression"/>
        </optional>
      </repeated>
    </definition>
  </rule>
  <rule name="UnaryExpression">
    <definition>
      <nonterminal name="PrimaryExpression"/>
    </definition>
    <definition>
      <nonterminal name="UnaryOperation"/>
    </definition>
  </rule>
  <rule name="UnaryOperation">
    <definition>
      <nonterminal name="UnaryOperator"/>
      <nonterminal name="␤"/>
      <nonterminal name="UnaryExpression"/>
    </definition>
    <definition>
      <comment>cast expression</comment>
      <nonterminal name="TypeLiteral"/>
      <nonterminal name="UnaryExpression"/>
    </definition>
  </rule>
  <rule name="UnaryOperator">
    <definition>
      <comment>sign of numbers</comment>
      <terminal>+</terminal>
      <terminal>-</terminal>
    </definition>
    <definition>
      <comment>logical negation</comment>
      <terminal>!</terminal>
      <terminal type="case-insensitive">-not</terminal>
    </definition>
    <definition>
      <comment>bitwise complement</comment>
      <terminal type="case-insensitive">-bnot</terminal>
    </definition>
    <definition>
      <comment>pre-increment and decrement</comment>
      <terminal>++</terminal>
      <terminal>--</terminal>
    </definition>
    <definition>
      <comment>unary operator</comment>
      <terminal type="case-insensitive">-split</terminal>
      <terminal type="case-insensitive">-join</terminal>
    </definition>
    <definition>
      <comment>unary operator?</comment>
      <terminal>,</terminal>
    </definition>
  </rule>

  <rule name="PrimaryExpression">
    <definition>
      <nonterminal name="Value"/>
    </definition>
    <definition>
      <nonterminal name="MemberAccess"/>
      <optional>
        <nonterminal name="PostfixOperator"/>
      </optional>
    </definition>
    <definition>
      <nonterminal name="ElementAccess"/>
      <optional>
        <nonterminal name="PostfixOperator"/>
      </optional>
    </definition>
    <definition>
      <nonterminal name="InvocationExpression"/>
    </definition>
  </rule>
  <rule name="PostfixOperator">
    <definition>
      <comment>post-increment and decrement</comment>
      <terminal>++</terminal>
      <terminal>--</terminal>
    </definition>
  </rule>
  <rule name="Value">
    <definition>
      <comment>parenthesized expression</comment>
      <terminal>(</terminal>
      <nonterminal name="␤"/>
      <nonterminal name="PipelineChain"/>
      <nonterminal name="␤"/>
      <terminal>)</terminal>
    </definition>
    <definition>
      <comment>subexpression (scalar on a single result)</comment>
      <terminal>$(</terminal>
      <nonterminal name="␤"/>
      <repeated>
        <optional>
          <nonterminal name="Statement"/>
        </optional>
      </repeated>
      <nonterminal name="␤"/>
      <terminal>)</terminal>
    </definition>
    <definition>
      <comment>array expression (array on a single result)</comment>
      <terminal>@(</terminal>
      <nonterminal name="␤"/>
      <repeated>
        <optional>
          <nonterminal name="Statement"/>
        </optional>
      </repeated>
      <nonterminal name="␤"/>
      <terminal>)</terminal>
    </definition>
    <definition>
      <comment>script block expression</comment>
      <terminal>{</terminal>
      <nonterminal name="␤"/>
      <nonterminal name="Script"/>
      <nonterminal name="␤"/>
      <terminal>}</terminal>
    </definition>
    <definition>
      <comment>object, dictionary, associative array</comment>
      <nonterminal name="HashTable"/>
    </definition>
    <definition>
      <nonterminal name="Number"/>
    </definition>
    <definition>
      <nonterminal name="String"/>
    </definition>
    <definition>
      <nonterminal name="TypeLiteral"/>
    </definition>
    <definition>
      <nonterminal name="Variable"/>
      <optional>
        <nonterminal name="PostfixOperator"/>
      </optional>
    </definition>
  </rule>
  <rule name="HashTable">
    <definition>
      <optional>
        <terminal type="case-insensitive">[ordered]</terminal>
      </optional>
      <terminal>@{</terminal>
      <nonterminal name="␤"/>
      <optional>
        <nonterminal name="HashEntries"/>
      </optional>
      <nonterminal name="␤"/>
      <terminal>}</terminal>
    </definition>
  </rule>
  <rule name="HashEntries">
    <definition>
      <nonterminal name="HashEntry"/>
      <repeated>
        <optional>
          <terminal>;</terminal>
          <nonterminal name="HashEntry"/>
        </optional>
      </repeated>
    </definition>
  </rule>
  <rule name="HashEntry">
    <definition>
      <nonterminal name="KeyExpression"/>
      <terminal>=</terminal>
      <nonterminal name="␤"/>
      <nonterminal name="Statement"/>
    </definition>
  </rule>

  <rule name="MemberAccess">
    <comment>No whitespace between terms!</comment>
    <definition>
      <comment>object property or method</comment>
      <nonterminal name="PrimaryExpression"/>
      <terminal>.</terminal>
      <nonterminal name="MemberName"/>
    </definition>
    <definition>
      <comment>static class member</comment>
      <nonterminal name="PrimaryExpression"/>
      <terminal>::</terminal>
      <nonterminal name="MemberName"/>
    </definition>
  </rule>
  <rule name="MemberName">
    <definition>
      <nonterminal name="SimpleName"/>
    </definition>
    <definition>
      <nonterminal name="StringLiteral"/>
    </definition>
    <definition>
      <nonterminal name="StringLiteralWithSubexpression"/>
    </definition>
    <definition>
      <nonterminal name="UnaryOperation"/>
    </definition>
    <definition>
      <nonterminal name="Value"/>
    </definition>
  </rule>
  <rule name="ElementAccess">
    <comment>array member</comment>
    <definition>
      <nonterminal name="PrimaryExpression"/>
      <terminal>[</terminal>
      <nonterminal name="␤"/>
      <nonterminal name="Expression"/>
      <nonterminal name="␤"/>
      <terminal>]</terminal>
    </definition>
  </rule>


  <rule name="InvocationExpression">
    <definition>
      <nonterminal name="TargetExpression"/>
      <nonterminal name="MemberName"/>
      <terminal>(</terminal>
      <optional>
        <nonterminal name="ArgumentList"/>
      </optional>
      <nonterminal name="␤"/>
      <terminal>)</terminal>
    </definition>
    <definition>
      <nonterminal name="TargetExpression"/>
      <nonterminal name="MemberName"/>
      <nonterminal name="Script"/>
    </definition>
  </rule>
  <rule name="ArgumentList">
    <comment>No array literal argument!</comment>
    <definition>
      <nonterminal name="Expression"/>
      <repeated>
        <optional>
          <nonterminal name="␤"/>
          <terminal>,</terminal>
          <nonterminal name="Expression"/>
        </optional>
      </repeated>
    </definition>
  </rule>

  <rule name="MethodStatement">
    <definition>
      <nonterminal name="␤"/>
      <nonterminal name="FunctionName"/>
      <nonterminal name="␤"/>
      <terminal>(</terminal>
      <nonterminal name="ParameterList"/>
      <nonterminal name="␤"/>
      <terminal>)</terminal>
      <optional>
      <nonterminal name="BaseConstructorCall"/>
      </optional>
      <terminal>{</terminal>
      <nonterminal name="Script"/>
      <terminal>}</terminal>
    </definition>
  </rule>
  <rule name="BaseConstructorCall">
    <comment>can be present only if FunctionName == ClassName</comment>
    <definition>
      <terminal>:</terminal>
      <nonterminal name="␤"/>
      <terminal type="case-insensitive">base</terminal>
      <nonterminal name="␤"/>
      <terminal>(</terminal>
      <nonterminal name="␤"/>
      <nonterminal name="PipelineChain"/>
      <nonterminal name="␤"/>
      <terminal>)</terminal>
      <nonterminal name="␤"/>
    </definition>
  </rule>
  <rule name="FunctionDefinition">
    <definition>
      <nonterminal name="Declarator"/>
      <nonterminal name="␤"/>
      <optional>
        <nonterminal name="Scope"/>
        <terminal>:</terminal>
      </optional>
      <nonterminal name="FunctionName"/>
      <optional>
        <nonterminal name="␤"/>
        <terminal>(</terminal>
        <nonterminal name="ParameterList"/>
        <nonterminal name="␤"/>
        <terminal>)</terminal>
      </optional>
      <terminal>{</terminal>
      <nonterminal name="Script"/>
      <terminal>}</terminal>
    </definition>
  </rule>
  <rule name="Declarator">
    <definition>
      <comment>[System.Enum]::GetNames('System.Management.Automation.Language.ConfigurationType')</comment>
      <terminal type="case-insensitive">configuration</terminal>
    </definition>
    <definition>
      <terminal type="case-insensitive">function</terminal>
    </definition>
    <definition>
      <terminal type="case-insensitive">filter</terminal>
    </definition>
    <definition>
      <terminal type="case-insensitive">workflow</terminal>
    </definition>
  </rule>
  <rule name="FunctionName">
    <definition>
      <terminal type="regular">[^-($].*[^ \t]</terminal>
    </definition>
    <definition>
      <nonterminal name="CommandArgument"/>
    </definition>
  </rule>

  <rule name="Command">
    <definition>
      <nonterminal name="CommandName"/>
      <repeated>
        <optional>
          <nonterminal name="CommandElement"/>
        </optional>
      </repeated>
    </definition>
    <definition>
      <nonterminal name="CommandInvocationOperator"/>
      <optional>
        <nonterminal name="CommandModule"/>
      </optional>
      <nonterminal name="CommandNameExpression"/>
      <repeated>
        <optional>
          <nonterminal name="CommandElement"/>
        </optional>
      </repeated>
      <repeated>
        <optional>
          <nonterminal name="cmdletPostfix"/>
        </optional>
      </repeated>
    </definition>
  </rule>
  <rule name="CommandInvocationOperator">
    <definition>
      <comment>
        call operator, see also &lt;span class="terminal"
        style="color:black"&gt;Invoke-Expression &lt;/span&gt;
      </comment>
      <terminal>&amp;</terminal>
    </definition>
    <definition>
      <comment>add and run script or function to the local scope</comment>
      <terminal>.</terminal>
    </definition>
  </rule>
  <rule name="CommandModule">
    <definition>
      <nonterminal name="PrimaryExpression"/>
    </definition>
  </rule>
  <rule name="CommandNameExpression">
    <definition>
      <nonterminal name="CommandName"/>
    </definition>
    <definition>
      <nonterminal name="PrimaryExpression"/>
    </definition>
  </rule>

  <rule name="CommandElement">
    <definition>
      <nonterminal name="CommandParameter"/>
    </definition>
    <definition>
      <nonterminal name="CommandArgument"/>
    </definition>
    <definition>
      <nonterminal name="Redirection"/>
    </definition>
  </rule>

  <rule name="CommandArgument">
    <definition>
      <nonterminal name="CommandNameExpression"/>
    </definition>
  </rule>

  <rule name="InstanceName">
    <definition>
      <nonterminal name="CommandArgument"/>
    </definition>
    <definition>
      <nonterminal name="PrimaryExpression"/>
    </definition>
  </rule>

  <rule name="ClassDefinition">
    <comment>PowerShell classes are not supported in ConstrainedLanguage.</comment>
    <definition>
      <repeated>
        <optional>
          <nonterminal name="Attribute"/>
        </optional>
      </repeated>
      <terminal type="case-insensitive">class</terminal>
      <nonterminal name="␤"/>
      <nonterminal name="SimpleName"/>
      <nonterminal name="␤"/>
      <terminal>{</terminal>
      <repeated>
        <nonterminal name="ClassMember"/>
        <nonterminal name="␤"/>
      </repeated>
      <terminal>}</terminal>
    </definition>
    <definition>
      <repeated>
        <optional>
          <nonterminal name="Attribute"/>
        </optional>
      </repeated>
      <terminal type="case-insensitive">class</terminal>
      <nonterminal name="␤"/>
      <nonterminal name="SimpleName"/>
      <nonterminal name="␤"/>
      <terminal>:</terminal>
      <nonterminal name="BaseTypeList"/>
      <terminal>{</terminal>
      <nonterminal name="␤"/>
      <repeated>
        <optional>
          <nonterminal name="ClassMember"/>
          <nonterminal name="␤"/>
        </optional>
      </repeated>
      <terminal>}</terminal>
    </definition>
  </rule>
  <rule name="BaseTypeList">
    <comment>basetype + interfaces</comment>
    <definition>
      <nonterminal name="␤"/>
      <nonterminal name="TypeName"/>
      <nonterminal name="␤"/>
      <repeated>
        <optional>
          <terminal>,</terminal>
          <nonterminal name="␤"/>
          <nonterminal name="TypeName"/>
          <nonterminal name="␤"/>
        </optional>
      </repeated>
    </definition>
  </rule>
  <rule name="ClassMember">
    <definition>
      <nonterminal name="PropertyMember"/>
    </definition>
    <definition>
      <nonterminal name="MethodMember"/>
    </definition>
  </rule>
  <rule name="PropertyMember">
    <definition>
      <repeated>
        <optional>
          <nonterminal name="MemberAttribute"/>
        </optional>
      </repeated>
      <nonterminal name="Variable"/>
      <optional>
        <terminal>=</terminal>
        <nonterminal name="Expression"/>
      </optional>
    </definition>
  </rule>
  <rule name="MethodMember">
    <definition>
      <comment>Constructors have the same name as the class.</comment>
      <repeated>
        <optional>
          <nonterminal name="MemberAttribute"/>
        </optional>
      </repeated>
      <nonterminal name="FunctionDefinition"/>
    </definition>
  </rule>
  <rule name="MemberAttribute">
    <comment>
      [System.Enum]::GetNames('System.Management.Automation.Language.PropertyAttributes')
      &lt;br/&gt;
      [System.Enum]::GetNames('System.Management.Automation.Language.MethodAttributes')
    </comment>
    <definition>
      <nonterminal name="Attribute"/>
    </definition>
    <definition>
      <comment>not yet supported</comment>
      <terminal type="case-insensitive">public</terminal>
    </definition>
    <definition>
      <comment>not yet supported</comment>
      <terminal type="case-insensitive">private</terminal>
    </definition>
    <definition>
      <comment>
        Hidden members are hidden from the &lt;span class="terminal"
        style="color:black"&gt;Get-Member &lt;/span&gt; cmdlet and &lt;br/&gt;
        can't be displayed using tab completion
        or IntelliSense outside of the class definition.
      </comment>
      <terminal type="case-insensitive">hidden</terminal>
    </definition>
    <definition>
      <comment>
        A static property is always available, independent of class instantiation. &lt;br/&gt;
        A static property is shared across all instances of the class. &lt;br/&gt;
        A static method is available always. All static properties live for the entire session span.
      </comment>
      <terminal type="case-insensitive">static</terminal>
    </definition>
  </rule>

  <rule name="EnumDefinition">
    <definition>
      <optional>
        <terminal type="case-insensitive">[flags()]</terminal>
      </optional>
      <terminal type="case-insensitive">enum</terminal>
      <nonterminal name="␤"/>
      <nonterminal name="SimpleName"/>
      <optional>
        <terminal>:</terminal>
        <nonterminal name="␤"/>
        <nonterminal name="ValidTypeName"/>
        <nonterminal name="␤"/>
      </optional>
      <terminal>{</terminal>
      <repeated>
        <nonterminal name="SimpleName"/>
        <optional>
          <terminal>=</terminal>
          <nonterminal name="Expression"/>
        </optional>
        <nonterminal name="␤"/>
      </repeated>
      <terminal>}</terminal>
    </definition>
  </rule>

  <rule name="String">
    <definition>
      <comment>literal</comment>
      <terminal>'</terminal>
      <terminal type="regular">.*</terminal>
      <terminal>'</terminal>
    </definition>
    <definition>
      <comment>with interpolation</comment>
      <terminal>"</terminal>
      <terminal type="regular">.*</terminal>
      <terminal>"</terminal>
    </definition>
    <definition>
      <comment>literal multiline here-string</comment>
      <terminal>@'</terminal>
      <nonterminal name="LineBreak"/>
      <terminal type="regular">.*</terminal>
      <nonterminal name="LineBreak"/>
      <terminal>'@</terminal>
    </definition>
    <definition>
      <comment>multiline here-string with interpolation</comment>
      <terminal>@"</terminal>
      <nonterminal name="LineBreak"/>
      <terminal type="regular">.*</terminal>
      <nonterminal name="LineBreak"/>
      <terminal>"@</terminal>
    </definition>
  </rule>
  <rule name="parameterToken">
    <definition>
      <terminal>-</terminal>
      <repeated>
        <terminal type="regular">\p{L}+</terminal>
      </repeated>
      <optional>
        <terminal>:</terminal>
      </optional>
    </definition>
  </rule>
  <rule name="Number">
    <comment>Hexadecimal prefix is only for integers.</comment>
    <definition>
      <optional>
        <terminal type="case-insensitive">0x</terminal>
      </optional>
      <terminal type="regular">(0|[1-9]\d*)(\.\d+)?([Ee][+-]?\d+)?</terminal>
      <optional>
        <nonterminal name="TypeSuffix"/>
      </optional>
      <optional>
        <nonterminal name="MultiplierSuffix"/>
      </optional>
    </definition>
  </rule>
  <rule name="TypeSuffix">
    <definition>
      <comment>decimal real number</comment>
      <terminal type="case-insensitive">d</terminal>
    </definition>
    <definition>
      <comment>signed byte integer</comment>
      <terminal type="case-insensitive">y</terminal>
    </definition>
    <definition>
      <comment>unsigned byte integer</comment>
      <terminal type="case-insensitive">uy</terminal>
    </definition>
    <definition>
      <comment>signed short integer</comment>
      <terminal type="case-insensitive">s</terminal>
    </definition>
    <definition>
      <comment>unsigned short integer</comment>
      <terminal type="case-insensitive">us</terminal>
    </definition>
    <definition>
      <comment>signed long integer</comment>
      <terminal type="case-insensitive">l</terminal>
    </definition>
    <definition>
      <comment>unsigned long integer</comment>
      <terminal type="case-insensitive">ul</terminal>
    </definition>
    <definition>
      <comment>unsigned int or long integer</comment>
      <terminal type="case-insensitive">u</terminal>
    </definition>
  </rule>
  <rule name="MultiplierSuffix">
    <definition>
      <comment>kilobyte</comment>
      <terminal type="case-insensitive">KB</terminal>
    </definition>
    <definition>
      <comment>megabyte</comment>
      <terminal type="case-insensitive">MB</terminal>
    </definition>
    <definition>
      <comment>gigabyte</comment>
      <terminal type="case-insensitive">GB</terminal>
    </definition>
    <definition>
      <comment>terabyte</comment>
      <terminal type="case-insensitive">TB</terminal>
    </definition>
    <definition>
      <comment>petabyte</comment>
      <terminal type="case-insensitive">PB</terminal>
    </definition>
  </rule>

  <rule name="loopLabelToken">
    <definition>
      <terminal type="regular">\p{Letter}</terminal>
      <repeated>
        <optional>
          <terminal type="regular">\p{alnum}</terminal>
        </optional>
      </repeated>
      <terminal>:</terminal>
    </definition>
  </rule>
  <rule name="cmdletNameToken">
    <definition>
      <terminal type="regular">[^$0-9(@"'][^ \t]*</terminal>
    </definition>
  </rule>

  <rule name="DataStatement">
    <definition>
      <terminal type="case-insensitive">data</terminal>
      <nonterminal name="␤"/>
      <nonterminal name="SimpleName"/>
      <optional>
        <nonterminal name="␤"/>
        <terminal type="case-insensitive">-supportedcommand</terminal>
        <nonterminal name="DataCommandList"/>
      </optional>
      <nonterminal name="StatementBlock"/>
    </definition>
  </rule>
  <rule name="DataCommandList">
    <definition>
      <nonterminal name="␤"/>
      <nonterminal name="CommandNameExpression"/>
      <repeated>
        <optional>
          <terminal>,</terminal>
          <nonterminal name="␤"/>
          <nonterminal name="CommandNameExpression"/>
        </optional>
      </repeated>
    </definition>
  </rule>
</syntax>
